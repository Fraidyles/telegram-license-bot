import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING, CHECK_LICENSE, SEND_TEMPLATE, SEND_PROGRAM = range(4)

# –®–∞–±–ª–æ–Ω—ã —Ä–µ–∑—é–º–µ
templates = {
    "GP": "üìÑ *–®–∞–±–ª–æ–Ω —Ä–µ–∑—é–º–µ –¥–ª—è GP*:\n\n–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ì–µ—Ç–∫—É—Ä—Å...\n(—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ GP)",
    "BT": "üìÑ *–®–∞–±–ª–æ–Ω —Ä–µ–∑—é–º–µ –¥–ª—è BT*:\n\n–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç 20 –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–π...\n(—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ BT)",
    "GD –ü–æ–ª–∏–Ω–∞ –ì–∞–Ω–∂–∞—Ä–∞": "üìÑ *–®–∞–±–ª–æ–Ω –¥–ª—è GD –ü–æ–ª–∏–Ω–∞ –ì–∞–Ω–∂–∞—Ä–∞*:\n\n20 –∑–∞–Ω—è—Ç–∏–π –ø–æ 2 —á–∞—Å–∞...\n(—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –ì–∞–Ω–∂–∞—Ä–∞)",
    "GD –ö—Å–µ–Ω–∏—è –ò—Å–ª–∞–º–æ–≤–∞": "üìÑ *–®–∞–±–ª–æ–Ω –¥–ª—è GD –ö—Å–µ–Ω–∏—è –ò—Å–ª–∞–º–æ–≤–∞*:\n\n54 –º–∏–Ω–∏-—É—Ä–æ–∫–∞ –ø–æ 30 –º–∏–Ω—É—Ç...\n(—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –ò—Å–ª–∞–º–æ–≤–∞)",
    "Specialist –ì–∏–Ω–µ–∫–æ–ª–æ–≥": "üìÑ *–®–∞–±–ª–æ–Ω –¥–ª—è Specialist-–≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞*:\n\n15 –∑–∞–Ω—è—Ç–∏–π –ø–æ 2 —á–∞—Å–∞...\n(—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ Specialist)",
    "–†–µ–∑–∏–¥–µ–Ω—Ç—É—Ä–∞": "üìÑ *–®–∞–±–ª–æ–Ω –¥–ª—è –†–µ–∑–∏–¥–µ–Ω—Ç—É—Ä—ã*:\n\n–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è...\n(—Ç–µ–∫—Å—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç—É—Ä—ã)"
}

# –ü—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–æ–≤
programs = {
    "GP": "üìò *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ GP*:\n\n- –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è\n- –ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥–∏—è\n...",
    "BT": "üìò *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ BT*:\n\nüîó –°—Å—ã–ª–∫–∞: https://clck.ru/3FAPvx",
    "GD –ü–æ–ª–∏–Ω–∞ –ì–∞–Ω–∂–∞—Ä–∞": "üìò *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ GD (–ü–æ–ª–∏–Ω–∞ –ì–∞–Ω–∂–∞—Ä–∞)*:\n\n1. –ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞\n2. –ò–Ω—Ñ–µ–∫—Ü–∏–∏\n...",
    "Specialist –ì–∏–Ω–µ–∫–æ–ª–æ–≥": "üìò *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ Specialist - –ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è*:\n\n1. –ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è\n2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏\n...",
    "Spec –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥": "üìò *–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è*:\n\n–ë–ª–æ–∫ 1 (–ù. –ö–∞–ª–µ—à—É–∫): Acne, Psoriasis, Skin Cancer\n–ë–ª–æ–∫ 2 (–Æ. –ö—É–∑—å–º–µ–Ω–∫–æ): Hair, Nails, AGA\n...",
    "Spec –ö–∞—Ä–¥–∏–æ–ª–æ–≥": "üìò *–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è*:\n\n1. Hypertension, ECG, MI\n2. Atrial Fibrillation\n..."
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = [["ü©∫ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"], ["üìÑ –®–∞–±–ª–æ–Ω—ã —Ä–µ–∑—é–º–µ"], ["üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞"]]
template_keyboard = [[key] for key in templates]
program_keyboard = [[key] for key in programs]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–µ–π –≤ –û–ê–≠. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )
    return CHOOSING

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "ü©∫ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é":
        await update.message.reply_text("üîç –ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è –¥–∏–ø–ª–æ–º, –æ–ø—ã—Ç, –∏ –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é.")
        return CHECK_LICENSE
    elif text == "üìÑ –®–∞–±–ª–æ–Ω—ã —Ä–µ–∑—é–º–µ":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:", reply_markup=ReplyKeyboardMarkup(template_keyboard, resize_keyboard=True))
        return SEND_TEMPLATE
    elif text == "üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=ReplyKeyboardMarkup(program_keyboard, resize_keyboard=True))
        return SEND_PROGRAM
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π.")
        return CHOOSING

async def check_license(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = update.message.text.lower()
    result = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    if "–≥–∏–Ω–µ–∫–æ–ª–æ–≥" in msg or "–∞–∫—É—à–µ—Ä" in msg:
        result = "‚úÖ –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏—Ü–µ–Ω–∑–∏—è Specialist."
    elif "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥" in msg:
        result = "‚úÖ –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏—Ü–µ–Ω–∑–∏—è General Dentist (GD)."
    elif "—Ç–µ—Ä–∞–ø–µ–≤—Ç" in msg or "–ø–µ–¥–∏–∞—Ç—Ä" in msg:
        result = "‚úÖ –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏—Ü–µ–Ω–∑–∏—è GP."
    await update.message.reply_text(result)
    return CHOOSING

async def send_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text
    text = templates.get(key, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await update.message.reply_text(text, parse_mode="Markdown")
    return CHOOSING

async def send_program(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text
    text = programs.get(key, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await update.message.reply_text(text, parse_mode="Markdown")
    return CHOOSING

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            CHECK_LICENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_license)],
            SEND_TEMPLATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_template)],
            SEND_PROGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_program)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()