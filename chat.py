import json
import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ–∑—é–º–µ
with open("templates.json", "r", encoding="utf-8") as f:
    templates = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∫—É—Ä—Å–æ–≤
with open("programs.json", "r", encoding="utf-8") as f:
    programs = json.load(f)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    CHOOSING, PROFESSION, EDUCATION, SPECIALITY_CHECK, EXPERIENCE,
    POSTGRADUATE_EDU, POSTGRADUATE_YEARS, ACCREDITATION, FROM_RUSSIA,
    SEND_TEMPLATE, SEND_PROGRAM, NURSE_EDU_DURATION, NURSE_LICENSE
) = range(13)

# –ö–Ω–æ–ø–∫–∏
main_keyboard = [["ü©∫ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"], ["üìÑ –®–∞–±–ª–æ–Ω—ã —Ä–µ–∑—é–º–µ"], ["üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞"]]
template_keyboard = [[key] for key in templates]
program_keyboard = [[key] for key in programs]

SPECIALITIES_GP = [
    "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è", "–†–µ–∞–Ω–∏–º–∞—Ç–æ–ª–æ–≥–∏—è", "–°–∫–æ—Ä–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å",
    "–°–µ–º–µ–π–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞", "–ü–µ–¥–∏–∞—Ç—Ä–∏—è", "–û–±—â–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è", "–ê–∫—É—à–µ—Ä—Å—Ç–≤–æ –∏ –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è"
]
POSTGRADUATE_OPTIONS = [
    "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç—É—Ä–∞",
    "–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ 2 –≥–æ–¥–∞",
    "–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ 3+ –ª–µ—Ç –∏–ª–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—É—Ä–∞ 3+ –ª–µ—Ç",
    "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –∏ –ö–ú–ù"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                                    reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True))
    return CHOOSING

async def main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "ü©∫ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é":
        await update.message.reply_text("–ö—Ç–æ –≤—ã –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?",
                                        reply_markup=ReplyKeyboardMarkup([["–≤—Ä–∞—á", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–º–µ–¥—Å–µ—Å—Ç—Ä–∞/—Ñ–µ–ª—å–¥—à–µ—Ä"]],
                                                                         one_time_keyboard=True, resize_keyboard=True))
        return PROFESSION
    elif choice == "üìÑ –®–∞–±–ª–æ–Ω—ã —Ä–µ–∑—é–º–µ":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:", reply_markup=ReplyKeyboardMarkup(template_keyboard, resize_keyboard=True))
        return SEND_TEMPLATE
    elif choice == "üìò –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=ReplyKeyboardMarkup(program_keyboard, resize_keyboard=True))
        return SEND_PROGRAM
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π.")
        return CHOOSING

async def profession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profession_choice = update.message.text.lower()
    context.user_data['profession'] = profession_choice

    if profession_choice == "–º–µ–¥—Å–µ—Å—Ç—Ä–∞/—Ñ–µ–ª—å–¥—à–µ—Ä":
        await update.message.reply_text("–í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª–∏–ª–æ—Å—å 3 –≥–æ–¥–∞ –∏ –¥–æ–ª—å—à–µ?",
                                        reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
        return NURSE_EDU_DURATION

    await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?",
                                    reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
    return EDUCATION

async def nurse_edu_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        context.user_data['nurse_edu'] = True
        await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã/—Ñ–µ–ª—å–¥—à–µ—Ä–∞?",
                                        reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
        return NURSE_LICENSE
    else:
        await update.message.reply_text("‚õîÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å—Å—è –Ω–∞ Beauty Therapist")
        return CHOOSING

async def nurse_license(update: Update, context: ContextTypes.DEFAULT_TYPE):
    has_license = update.message.text.lower() == "–¥–∞"
    if has_license and context.user_data.get('nurse_edu', False):
        message = "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Registered Nurse."
    else:
        message = "‚õîÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å—Å—è –Ω–∞ Beauty Therapist."
    
    await update.message.reply_text(
        message + "\n\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )
    return CHOOSING

async def education(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    context.user_data['education'] = text

    if text == "–¥–∞":
        if context.user_data['profession'] == "–≤—Ä–∞—á":
            await update.message.reply_text(
                "–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞: " + ", ".join(SPECIALITIES_GP) + "?",
                reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return SPECIALITY_CHECK
        elif context.user_data['profession'] == "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥":
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —É –≤–∞—Å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞–∂–∞?")
            return EXPERIENCE
    else:
        await update.message.reply_text("–ë–µ–∑ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return ConversationHandler.END

async def speciality_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['speciality_match'] = (update.message.text.lower() == "–¥–∞")
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —É –≤–∞—Å —Å—Ç–∞–∂–∞?")
    return EXPERIENCE

async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['experience'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return EXPERIENCE

    if context.user_data['profession'] == "–≤—Ä–∞—á":
        await update.message.reply_text("–ö–∞–∫–æ–µ —É –≤–∞—Å –ø–æ—Å—Ç–¥–∏–ø–ª–æ–º–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?",
                                        reply_markup=ReplyKeyboardMarkup([POSTGRADUATE_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return POSTGRADUATE_EDU
    elif context.user_data['profession'] == "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥":
        await update.message.reply_text("–ö–∞–∫–æ–µ —É –≤–∞—Å –ø–æ—Å—Ç–¥–∏–ø–ª–æ–º–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?",
                                        reply_markup=ReplyKeyboardMarkup([POSTGRADUATE_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return POSTGRADUATE_EDU
    else:
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏?",
                                        reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
        return ACCREDITATION

async def postgraduate_edu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['postgraduate_edu'] = update.message.text
    if update.message.text in ["–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ 3+ –ª–µ—Ç –∏–ª–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—É—Ä–∞ 3+ –ª–µ—Ç", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –∏ –ö–ú–ù"]:
        await update.message.reply_text("–ü—Ä–æ—à–ª–æ –ª–∏ 3 –≥–æ–¥–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å—Ç–¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?",
                                        reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
        return POSTGRADUATE_YEARS
    else:
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è?",
                                        reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
        return ACCREDITATION

async def postgraduate_years(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['postgraduate_years_passed'] = (update.message.text.lower() == "–¥–∞")
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è?",
                                    reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
    return ACCREDITATION

async def accreditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['accreditation'] = (update.message.text.lower() == "–¥–∞")
    await update.message.reply_text("–í—ã –∏–∑ –†–æ—Å—Å–∏–∏?",
                                    reply_markup=ReplyKeyboardMarkup([["–¥–∞", "–Ω–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True))
    return FROM_RUSSIA

async def from_russia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['from_russia'] = (update.message.text.lower() == "–¥–∞")
    result = determine_license(context.user_data)
   await update.message.reply_text(
    result + "\n\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
)
return CHOOSING

def determine_license(data):
    prof = data.get('profession')
    edu = data.get('education') == "–¥–∞"
    speciality_match = data.get('speciality_match', False)
    experience = data.get('experience', 0)
    postgrad = data.get('postgraduate_edu', "")
    postgrad_years_passed = data.get('postgraduate_years_passed', False)
    accreditation = data.get('accreditation', False)
    from_russia = data.get('from_russia', False)

    if prof == "–º–µ–¥—Å–µ—Å—Ç—Ä–∞/—Ñ–µ–ª—å–¥—à–µ—Ä":
        return "‚õîÔ∏è (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ)"

    specialist_postgrad = postgrad in ["–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ 3+ –ª–µ—Ç –∏–ª–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—É—Ä–∞ 3+ –ª–µ—Ç", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –∏ –ö–ú–ù"]

    if prof == "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥" and edu:
        if specialist_postgrad and postgrad_years_passed and accreditation and experience >= 3:
            return "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—é GD Specialist."
        elif experience >= 4 and accreditation:
            return "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—é GD, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ß–õ–•."
        else:
            return "‚õîÔ∏è –í—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—é GD."

    if edu and specialist_postgrad and postgrad_years_passed and accreditation and experience >= 3:
        return "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ Specialist."

    if prof == "–≤—Ä–∞—á" and edu:
        if speciality_match:
            if experience >= 4 and accreditation:
                return "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ GP."
            elif experience >= 2 and postgrad == "–ò–Ω—Ç–µ—Ä–Ω–∞—Ç—É—Ä–∞":
                return "‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ GP."
            elif from_russia:
                return "–ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –∏ —Å—Ç–∞–∂ –¥–ª—è GP."
            else:
                return "‚õîÔ∏è –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ª–∏—Ü–µ–Ω–∑–∏—é."
        else:
            if experience >= 4 and accreditation:
                return "–í–æ–∑–º–æ–∂–Ω–æ GP, –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –ø–æ –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
            elif from_russia:
                return "–ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç–∞–∂ –∏ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è GP."
            else:
                return "‚õîÔ∏è –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ª–∏—Ü–µ–Ω–∑–∏—é."

    return "‚õîÔ∏è –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ª–∏—Ü–µ–Ω–∑–∏—é."

# --- –®–∞–±–ª–æ–Ω—ã / –ü—Ä–æ–≥—Ä–∞–º–º—ã ---
async def send_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
    templates.get(update.message.text, "‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.") + "\n\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
)
return CHOOSING

async def send_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        program_text = programs.get(update.message.text, "‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
await update.message.reply_text(
    program_text + "\n\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
)
return CHOOSING

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_choice)],
            PROFESSION: [MessageHandler(filters.TEXT, profession)],
            EDUCATION: [MessageHandler(filters.TEXT, education)],
            SPECIALITY_CHECK: [MessageHandler(filters.TEXT, speciality_check)],
            EXPERIENCE: [MessageHandler(filters.TEXT, experience)],
            POSTGRADUATE_EDU: [MessageHandler(filters.TEXT, postgraduate_edu)],
            POSTGRADUATE_YEARS: [MessageHandler(filters.TEXT, postgraduate_years)],
            ACCREDITATION: [MessageHandler(filters.TEXT, accreditation)],
            FROM_RUSSIA: [MessageHandler(filters.TEXT, from_russia)],
            SEND_TEMPLATE: [MessageHandler(filters.TEXT, send_template)],
            SEND_PROGRAM: [MessageHandler(filters.TEXT, send_program)],
            NURSE_EDU_DURATION: [MessageHandler(filters.TEXT, nurse_edu_duration)],
            NURSE_LICENSE: [MessageHandler(filters.TEXT, nurse_license)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()